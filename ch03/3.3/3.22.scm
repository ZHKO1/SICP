(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr  '()))
    (define (empty-queue?)
      (null? front-ptr))
    (define (insert number)
      (let ((new-pair (cons number '())))
        (cond ((empty-queue?)
              (set! front-ptr new-pair)
              (set! rear-ptr new-pair)
              front-ptr)
            (else 
              (set-cdr! rear-ptr new-pair)
              (set! rear-ptr (cdr rear-ptr))
              front-ptr
            ))))
    (define (delete)
      (if (empty-queue?)
          (error "it is an empty-queueï¼ŒCan't be deleted" front-ptr)
          (begin  (set! front-ptr (cdr front-ptr))
                  (if (empty-queue?)
                      (set! rear-ptr '()))
                  front-ptr)))
    (define (dispatch m)
            (cond ((eq? m 'insert) insert)
                  ((eq? m 'delete) delete)
                  ((eq? m 'printf) printf)
                ))
    dispatch))

(define apple (make-queue))