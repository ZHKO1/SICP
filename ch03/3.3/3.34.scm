(load "ex_3.3.5.scm")

(define (multiplier m1 m2 product)
  (define (process-new-value)
    (cond ((or (and (has-value? m1) (= (get-value m1) 0))
               (and (has-value? m2) (= (get-value m2) 0))
            )
           (set-value! product 0 me))
          ((and (has-value? m1) (has-value? m2))
              (set-value! product 
                          (* (get-value m1) (get-value m2))
                          me))
          
          ((and (has-value? product) (eq? m1 m2) )
              (set-value! m1 
                          (sqrt (get-value product))
                          me))
            
          ((and (has-value? m1) (has-value? product))
              (set-value! m2 
                          (/ (get-value product) (get-value m1))
                          me))
            
          ((and (has-value? m2) (has-value? product))
              (set-value! m1 
                          (/ (get-value product) (get-value m2))
                          me))
            ))
  (define (process-forget-value)
    (forget-value! m1 me)
    (forget-value! m2 me)
    (forget-value! product me)
    (process-new-value)
  )
  (define (me request)
    (cond ((eq? request 'have-a-value) (process-new-value))
          ((eq? request 'forget-a-value) (process-forget-value))
          (else (error "Unkown request --Multiplier" request))
        ))
  (connect m1 me)
  (connect m2 me)
  (connect product me)
  me)

(define A (make-connector))
(define B (make-connector))
(probe "A" A)
(probe "B" B)
(multiplier A A B)
(set-value! A 13 'user)
