(load "ex_2.3.3.scm")

;(remove (lambda (x) (= x 1)) (list 1 2 3))

(define (remove-one-of-set one set)
  (cond ((null? set) '())
        ((null? one) set)
        ((equal? one (car set)) (cdr set))
        (else (cons (car set) (remove-one-of-set one (cdr set))))
      ))

(define (adjoin-set x set)
  (cons x set))

(define (intersection-set set1 set2)
  (newline)
  (display set1)
  (display "   :   ")
  (display set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)
          (cons (car set1) (intersection-set (cdr set1) (remove-one-of-set (car set1) set2))))
        (else (intersection-set (cdr set1) (remove-one-of-set (car set1) set2)))
      ))

(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        ((element-of-set? (car set1) set2)
          (cons (car set1) (union-set (cdr set1) (remove-one-of-set (car set1) set2))))
        (else (cons (car set1) (union-set (cdr set1) set2)))
      ))
